{
	"info": {
		"_postman_id": "a2c4fe63-977f-496d-a125-b55b0f5bd38d",
		"name": "[Dibimbing] x Event Ticket API",
		"description": "A comprehensive API for managing events, tickets, users, and reports. This API includes authentication, event management, ticket booking, and reporting features with pagination support.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32354224"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.token) {",
									"        pm.environment.set('auth_token', response.data.token);",
									"        pm.environment.set('user_id', response.data.id);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Asep Supriyadi\",\n    \"email\": \"testuser2@example.com\",\n    \"password\": \"testuser2123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new user account. The email must be unique and password must be at least 6 characters long."
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.token) {",
									"        pm.environment.set('auth_token', response.data.token);",
									"        pm.environment.set('user_id', response.data.id);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@system.com\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login with existing user credentials. Returns a JWT token for authentication."
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user registration and login"
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Get All Events (Paginated)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/events?page=1&page_size=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number (default: 1)"
								},
								{
									"key": "page_size",
									"value": "10",
									"description": "Number of items per page (default: 10, max: 100)"
								}
							]
						},
						"description": "Get a paginated list of all events. Supports pagination with page and page_size query parameters."
					},
					"response": []
				},
				{
					"name": "Get Event by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/events/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"1"
							]
						},
						"description": "Get details of a specific event by its ID."
					},
					"response": []
				},
				{
					"name": "Create Event (Admin Only)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Tech Conference 2025\",\n    \"description\": \"Annual technology conference featuring the latest innovations\",\n    \"location\": \"Jakarta Convention Center\",\n    \"category\": \"Technology\",\n    \"date\": \"2025-08-15T09:00:00Z\",\n    \"end_date\": \"2025-08-15T17:00:00Z\",\n    \"capacity\": 500,\n    \"price\": 150000\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events"
							]
						},
						"description": "Create a new event. Requires admin role. Date should be in ISO 8601 format."
					},
					"response": []
				},
				{
					"name": "Update Event (Admin Only)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Tech Conference 2025 - Updated\",\n    \"description\": \"Updated description for the annual technology conference\",\n    \"location\": \"Jakarta Convention Center - Hall A\",\n    \"category\": \"Technology\",\n    \"date\": \"2025-08-15T09:00:00Z\",\n    \"end_date\": \"2025-08-15T18:00:00Z\",\n    \"capacity\": 600,\n    \"price\": 175000,\n    \"status\": \"upcoming\" // upcoming, ongoing, completed, cancelled\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/events/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"1"
							]
						},
						"description": "Update an existing event. Requires admin role. All fields are optional."
					},
					"response": []
				},
				{
					"name": "Delete Event (Admin Only)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/events/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"1"
							]
						},
						"description": "Delete an event. Requires admin role. Cannot delete events with sold tickets."
					},
					"response": []
				}
			],
			"description": "Event management endpoints for CRUD operations"
		},
		{
			"name": "Tickets",
			"item": [
				{
					"name": "Get User Tickets (Paginated)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tickets?page=1&page_size=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tickets"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number (default: 1)"
								},
								{
									"key": "page_size",
									"value": "10",
									"description": "Number of items per page (default: 10, max: 100)"
								}
							]
						},
						"description": "Get a paginated list of tickets for the authenticated user."
					},
					"response": []
				},
				{
					"name": "Get Ticket by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tickets/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tickets",
								"1"
							]
						},
						"description": "Get details of a specific ticket by its ID."
					},
					"response": []
				},
				{
					"name": "Book Ticket",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"event_id\": 2,\n    \"quantity\": 600\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tickets",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tickets"
							]
						},
						"description": "Book tickets for an event. Requires authentication."
					},
					"response": []
				},
				{
					"name": "Cancel Ticket",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"Unable to attend due to personal reasons\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tickets/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tickets",
								"1"
							]
						},
						"description": "Cancel a booked ticket. Only the ticket owner can cancel their tickets."
					},
					"response": []
				}
			],
			"description": "Ticket management endpoints for booking and managing tickets"
		},
		{
			"name": "Reports (Admin Only)",
			"item": [
				{
					"name": "Get Summary Report",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/reports/summary",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"summary"
							]
						},
						"description": "Get overall summary report including total tickets sold and revenue. Requires admin role."
					},
					"response": []
				},
				{
					"name": "Get Event Report",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/reports/event/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"event",
								"2"
							]
						},
						"description": "Get detailed report for a specific event including tickets sold and revenue. Requires admin role."
					},
					"response": []
				},
				{
					"name": "Download Report PDF",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/reports/system/pdf",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"system",
								"pdf"
							]
						},
						"description": "Get detailed report for a specific event including tickets sold and revenue. Requires admin role."
					},
					"response": []
				}
			],
			"description": "Reporting endpoints for admin users to view sales and revenue data"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		}
	]
}